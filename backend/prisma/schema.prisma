generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  THERAPIST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  PAYMENT_PENDING
  PAID
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  VERIFIED
  FAILED
}

enum PaymentMethod {
  BANK_TRANSFER
  QRIS
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  role              UserRole  @default(PATIENT)
  isActive          Boolean   @default(true)
  emailVerified     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  patient           Patient?
  therapist         Therapist?
  notifications     Notification[]
  sentMessages      Message[]

  @@map("users")
}

model Patient {
  id                String    @id @default(uuid())
  userId            String    @unique
  name              String
  phone             String
  dateOfBirth       DateTime?
  gender            String?
  address           String?
  medicalHistory    String?
  emergencyContact  Json?
  profileImage      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings          Booking[]
  reviews           Review[]

  @@map("patients")
}

model Therapist {
  id                String    @id @default(uuid())
  userId            String    @unique
  name              String
  phone             String
  specialization    String[]
  experience        Int       @default(0)
  rating            Float     @default(0)
  reviewCount       Int       @default(0)
  location          String?
  pricePerSession   Int       @default(0)
  bio               String?
  qualifications    String[]
  profileImage      String?
  isAvailable       Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  availability      Availability[]
  bookings          Booking[]
  reviews           Review[]

  @@map("therapists")
}

model Availability {
  id                String    @id @default(uuid())
  therapistId       String
  dayOfWeek         Int
  startTime         String
  endTime           String
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  therapist         Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@map("availability")
}

model Booking {
  id                String        @id @default(uuid())
  patientId         String
  therapistId       String
  appointmentDate   DateTime
  appointmentTime   String
  location          String
  complaint         String
  medicalHistory    String?
  status            BookingStatus @default(PENDING)
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  patient           Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist         Therapist     @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  payment           Payment?
  session           Session?
  messages          Message[]

  @@map("bookings")
}

model Payment {
  id                String        @id @default(uuid())
  bookingId         String        @unique
  amount            Int
  method            PaymentMethod
  status            PaymentStatus @default(PENDING)
  paymentProof      String?
  verifiedAt        DateTime?
  verifiedBy        String?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  booking           Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Session {
  id                String    @id @default(uuid())
  bookingId         String    @unique
  startTime         DateTime?
  endTime           DateTime?
  duration          Int?
  therapistNotes    String?
  progressReport    String?
  exercisePlan      String?
  documents         String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  booking           Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Review {
  id                String    @id @default(uuid())
  patientId         String
  therapistId       String
  rating            Int
  comment           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  patient           Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist         Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Message {
  id                String    @id @default(uuid())
  bookingId         String
  senderId          String
  content           String
  attachments       String[]
  isRead            Boolean   @default(false)
  createdAt         DateTime  @default(now())

  booking           Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  sender            User      @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id                String    @id @default(uuid())
  userId            String
  title             String
  message           String
  type              String
  isRead            Boolean   @default(false)
  data              Json?
  createdAt         DateTime  @default(now())

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
